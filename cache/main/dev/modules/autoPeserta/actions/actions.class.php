<?php
// auto-generated by sfPropelAdmin
// date: 2018/03/21 16:05:44
?>
<?php

/**
 * autoPeserta actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoPeserta
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoPesertaActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('peserta', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('Peserta', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/peserta')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/peserta');
    }
  }

  public function executeCreate()
  {
    return $this->forward('peserta', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('peserta', 'edit');
  }

  public function executeEdit()
  {
    $this->peserta = $this->getPesertaOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updatePesertaFromRequest();

      $this->savePeserta($this->peserta);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('peserta/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('peserta/list');
      }
      else
      {
        return $this->redirect('peserta/edit?id='.$this->peserta->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->peserta = PesertaPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->peserta);

    try
    {
      $this->deletePeserta($this->peserta);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Peserta. Make sure it does not have any associated items.');
      return $this->forward('peserta', 'list');
    }

    return $this->redirect('peserta/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->peserta = $this->getPesertaOrCreate();
    $this->updatePesertaFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function savePeserta($peserta)
  {
    $peserta->save();

  }

  protected function deletePeserta($peserta)
  {
    $peserta->delete();
  }

  protected function updatePesertaFromRequest()
  {
    $peserta = $this->getRequestParameter('peserta');

    if (isset($peserta['id_wilayah']))
    {
    $this->peserta->setIdWilayah($peserta['id_wilayah'] ? $peserta['id_wilayah'] : null);
    }
    if (isset($peserta['rt']))
    {
      $this->peserta->setRt($peserta['rt']);
    }
    if (isset($peserta['rw']))
    {
      $this->peserta->setRw($peserta['rw']);
    }
    if (isset($peserta['ketua_rt']))
    {
      $this->peserta->setKetuaRt($peserta['ketua_rt']);
    }
    if (isset($peserta['ketua_rw']))
    {
      $this->peserta->setKetuaRw($peserta['ketua_rw']);
    }
  }

  protected function getPesertaOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $peserta = new Peserta();
    }
    else
    {
      $peserta = PesertaPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($peserta);
    }

    return $peserta;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/peserta/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/peserta/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/peserta/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/peserta/sort'))
    {
      $sort_column = PesertaPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/peserta/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'peserta{id_wilayah}' => 'Wilayah:',
      'peserta{rt}' => 'RT:',
      'peserta{rw}' => 'RW:',
      'peserta{ketua_rt}' => 'Ketua RT:',
      'peserta{ketua_rw}' => 'Ketua RW:',
    );
  }
}
