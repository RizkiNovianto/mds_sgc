<?php
// auto-generated by sfPropelAdmin
// date: 2018/03/15 09:25:57
?>
<?php

/**
 * autoPrestasi actions.
 *
 * @package    ##PROJECT_NAME##
 * @subpackage autoPrestasi
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: actions.class.php 9855 2008-06-25 11:26:01Z FabianLange $
 */
class autoPrestasiActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('prestasi', 'list');
  }

  public function executeList()
  {
    $this->processSort();

    $this->processFilters();


    // pager
    $this->pager = new sfPropelPager('Prestasi', 20);
    $c = new Criteria();
    $this->addSortCriteria($c);
    $this->addFiltersCriteria($c);
    $this->pager->setCriteria($c);
    $this->pager->setPage($this->getRequestParameter('page', $this->getUser()->getAttribute('page', 1, 'sf_admin/prestasi')));
    $this->pager->init();
    // save page
    if ($this->getRequestParameter('page')) {
        $this->getUser()->setAttribute('page', $this->getRequestParameter('page'), 'sf_admin/prestasi');
    }
  }

  public function executeCreate()
  {
    return $this->forward('prestasi', 'edit');
  }

  public function executeSave()
  {
    return $this->forward('prestasi', 'edit');
  }

  public function executeEdit()
  {
    $this->prestasi = $this->getPrestasiOrCreate();

    if ($this->getRequest()->getMethod() == sfRequest::POST)
    {
      $this->updatePrestasiFromRequest();

      $this->savePrestasi($this->prestasi);

      $this->setFlash('notice', 'Your modifications have been saved');

      if ($this->getRequestParameter('save_and_add'))
      {
        return $this->redirect('prestasi/create');
      }
      else if ($this->getRequestParameter('save_and_list'))
      {
        return $this->redirect('prestasi/list');
      }
      else
      {
        return $this->redirect('prestasi/edit?id='.$this->prestasi->getId());
      }
    }
    else
    {
      $this->labels = $this->getLabels();
    }
  }

  public function executeDelete()
  {
    $this->prestasi = PrestasiPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->prestasi);

    try
    {
      $this->deletePrestasi($this->prestasi);
    }
    catch (PropelException $e)
    {
      $this->getRequest()->setError('delete', 'Could not delete the selected Prestasi. Make sure it does not have any associated items.');
      return $this->forward('prestasi', 'list');
    }

      $currentFile = sfConfig::get('sf_upload_dir')."//".$this->prestasi->getFilePiagam();
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }

    return $this->redirect('prestasi/list');
  }

  public function handleErrorEdit()
  {
    $this->preExecute();
    $this->prestasi = $this->getPrestasiOrCreate();
    $this->updatePrestasiFromRequest();

    $this->labels = $this->getLabels();

    return sfView::SUCCESS;
  }

  protected function savePrestasi($prestasi)
  {
    $prestasi->save();

  }

  protected function deletePrestasi($prestasi)
  {
    $prestasi->delete();
  }

  protected function updatePrestasiFromRequest()
  {
    $prestasi = $this->getRequestParameter('prestasi');

    if (isset($prestasi['id_peserta_lomba']))
    {
    $this->prestasi->setIdPesertaLomba($prestasi['id_peserta_lomba'] ? $prestasi['id_peserta_lomba'] : null);
    }
    if (isset($prestasi['prestasi']))
    {
      $this->prestasi->setPrestasi($prestasi['prestasi']);
    }
    $currentFile = sfConfig::get('sf_upload_dir')."//".$this->prestasi->getFilePiagam();
    if (!$this->getRequest()->hasErrors() && isset($prestasi['file_piagam_remove']))
    {
      $this->prestasi->setFilePiagam('');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
    }

    if (!$this->getRequest()->hasErrors() && $this->getRequest()->getFileSize('prestasi[file_piagam]'))
    {
      $fileName = md5($this->getRequest()->getFileName('prestasi[file_piagam]').time().rand(0, 99999));
      $ext = $this->getRequest()->getFileExtension('prestasi[file_piagam]');
      if (is_file($currentFile))
      {
        unlink($currentFile);
      }
      $this->getRequest()->moveFile('prestasi[file_piagam]', sfConfig::get('sf_upload_dir')."//".$fileName.$ext);
      $this->prestasi->setFilePiagam($fileName.$ext);
    }
    if (isset($prestasi['filename_baru']))
    {
      $this->prestasi->setFilenameBaru($prestasi['filename_baru']);
    }
    if (isset($prestasi['keterangan']))
    {
      $this->prestasi->setKeterangan($prestasi['keterangan']);
    }
  }

  protected function getPrestasiOrCreate($id = 'id')
  {
    if (!$this->getRequestParameter($id))
    {
      $prestasi = new Prestasi();
    }
    else
    {
      $prestasi = PrestasiPeer::retrieveByPk($this->getRequestParameter($id));

      $this->forward404Unless($prestasi);
    }

    return $prestasi;
  }

  protected function processFilters()
  {
  }

  protected function processSort()
  {
    if ($this->getRequestParameter('sort'))
    {
      $this->getUser()->setAttribute('sort', $this->getRequestParameter('sort'), 'sf_admin/prestasi/sort');
      $this->getUser()->setAttribute('type', $this->getRequestParameter('type', 'asc'), 'sf_admin/prestasi/sort');
    }

    if (!$this->getUser()->getAttribute('sort', null, 'sf_admin/prestasi/sort'))
    {
    }
  }

  protected function addFiltersCriteria($c)
  {
  }

  protected function addSortCriteria($c)
  {
    if ($sort_column = $this->getUser()->getAttribute('sort', null, 'sf_admin/prestasi/sort'))
    {
      $sort_column = PrestasiPeer::translateFieldName($sort_column, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_COLNAME);
      if ($this->getUser()->getAttribute('type', null, 'sf_admin/prestasi/sort') == 'asc')
      {
        $c->addAscendingOrderByColumn($sort_column);
      }
      else
      {
        $c->addDescendingOrderByColumn($sort_column);
      }
    }
  }

  protected function getLabels()
  {
    return array(
      'prestasi{id_peserta_lomba}' => 'Peserta Lomba:',
      'prestasi{prestasi}' => 'Prestasi:',
      'prestasi{file_piagam}' => 'File Piagam:',
      'prestasi{filename_baru}' => 'Nama File:',
      'prestasi{keterangan}' => 'Keterangan:',
    );
  }
}
